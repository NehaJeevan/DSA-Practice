class Solution {
    int memSolve(vector<int>& slices, int i, int k, vector<vector<int>> &dp){
        int n=slices.size();
        if(i>=n || k==0) return 0;
        
        if(dp[i][k]!=-1) return dp[i][k];
        
        int exc=memSolve(slices, i+1, k, dp);
        int inc=slices[i]+memSolve(slices, i+2, k-1, dp);
        
        return dp[i][k]=max(inc,exc);
    }
    
    int tabSolve(vector<int> &slices, int K){
        int n=slices.size();
        vector<vector<int>> dp(n+2, vector<int>(K+1, 0));
        
        for(int i=n-1; i>=0; i--){
            for(int k=1; k<=K; k++){
                int exc = dp[i+1][k];
                int inc = slices[i] + dp[i+2][k-1];
                dp[i][k]=max(inc,exc);
            }
        }
        
        return dp[0][K];
        
    }
    
    int opti(vector<int> &slices, int K){
        int n=slices.size();
        vector<int> curr(K+1, 0), next1(K+1, 0), next2(K+1, 0);
        
        for(int i=n-1; i>=0; i--){
            for(int k=1; k<=K; k++){
                int exc = next1[k];
                int inc = slices[i] + next2[k-1];
                curr[k]=max(inc,exc);
            }
            next2=next1;
            next1=curr;
        }
        
        return curr[K];
        
    }
    
    
public:
    int maxSizeSlices(vector<int>& slices) {
        int n=slices.size();
        int k=n/3;
        vector<int> s1(slices);        
        s1.pop_back();                      //common part
        
        int a1=opti(s1, k);
        s1=slices;
        s1.erase(s1.begin());
        
        int a2=opti(s1, k);
        
        return max(a1, a2);
        
        a1=tabSolve(s1, k);
        s1=slices;
        s1.erase(s1.begin());
        
        a2=tabSolve(s1, k);
        
        return max(a1, a2);
        
        
        
        vector<vector<int>> dp(n-1, vector<int>(k+1, -1));
        
        
        
        a1=memSolve(s1, 0, k, dp);
        
        s1=slices;
        s1.erase(s1.begin());
        dp.clear();
        dp.resize(n-1, vector<int>(k+1, -1));
        
        a2=memSolve(s1, 0, k, dp);
        return max(a1,a2);
    }
};