class Solution {
    void sortDimens(vector<vector<int>>& cuboids){
        int n = cuboids.size();
        
        for(int i=0; i<n; i++){
            sort(cuboids[i].begin(),cuboids[i].end());
        }
    }
    
    static bool custSort(vector<int> &a, vector<int> &b){
        if(a[0]==b[0]){
            if(a[1]==b[1]){
                return a[2]>b[2];
            }
            return a[1]<b[1];
        }
        return a[0]<b[0];
    }
    
    bool check(vector<int> &a, vector<int> &b){
        if(a[2]>=b[2] && a[1]>=b[1] && a[0]>=b[0]) return true;
        return false;
    }
    
    int opti(vector<vector<int>> &a){
        int n=a.size();
        vector<int> curr(n+1, 0), next(n+1, 0);
        
        for(int i=n-1; i>=0; i--){
            for(int el=i-1; el>=-1; el--){
                int exc = next[el+1];
                int inc = 0;
                if(el==-1 || check(a[i],a[el])) inc=next[i+1]+a[i][2];
                curr[el+1]=max(exc, inc);
            }
            next=curr;
        }
        
        return curr[0];
    }
    
public:
    int maxHeight(vector<vector<int>>& cuboids) {
        sortDimens(cuboids);
        sort(cuboids.begin(), cuboids.end());
                
        return opti(cuboids);
    }
};