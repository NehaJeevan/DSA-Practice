//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
    
    int memSolve(vector<vector<int>> &mat, int i, int j, vector<vector<int>> &dp, int &maxi){
        if(i>=mat.size() || j>=mat[0].size()) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int right = memSolve(mat, i, j+1, dp, maxi);
        int down = memSolve(mat, i+1, j, dp, maxi);
        int diag = memSolve(mat, i+1, j+1, dp, maxi);
        
        if(mat[i][j]==1){
            int ans=min(right,min(down,diag))+1;
            maxi=max(maxi,ans);
            return dp[i][j]=ans;
        }
        
        return dp[i][j]=0;
    }
    
    int tabSolve(vector<vector<int>> mat, int n, int m){
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        int maxi=0;
        for(int i=n-1; i>=0; i--){
            for(int j=m-1; j>=0; j--){
                int right=dp[i][j+1];
                int down=dp[i+1][j];
                int diag=dp[i+1][j+1];
                
                if(mat[i][j]==1){
                    dp[i][j]=min(right,min(down,diag))+1;
                    maxi=max(maxi,dp[i][j]);
                } else dp[i][j]=0;
            }
        }
        
        return maxi;
    }
    
    int opti(vector<vector<int>> mat, int n, int m){
        vector<int> currRow(m+1, 0), prevRow(m+1, 0);
        int maxi=0;
        for(int i=n-1; i>=0; i--){
            for(int j=m-1; j>=0; j--){
                int right=currRow[j+1];
                int down=prevRow[j];
                int diag=prevRow[j+1];
                
                if(mat[i][j]==1){
                    currRow[j]=min(right,min(down,diag))+1;
                    maxi=max(maxi,currRow[j]);
                } else currRow[j]=0;
            }
            prevRow=currRow;
        }
        
        return maxi;
    }
    
    
public:
    int maxSquare(int n, int m, vector<vector<int>> mat){
        // code here
        return opti(mat, n, m);
        
        return tabSolve(mat, n, m);
        
        vector<vector<int>> dp(n, (vector<int>(m, -1)));
        int maxi=0;
        memSolve(mat, 0, 0, dp, maxi);
        return maxi;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n, m;
        cin>>n>>m;
        vector<vector<int>> mat(n, vector<int>(m, 0));
        for(int i = 0;i < n*m;i++)
            cin>>mat[i/m][i%m];
        
        Solution ob;
        cout<<ob.maxSquare(n, m, mat)<<"\n";
    }
    return 0;
}
// } Driver Code Ends